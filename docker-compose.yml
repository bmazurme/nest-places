version: "3.9"

services:
  postgres:
    image: postgres:13.2-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
      - ./migrations/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-newPassword}
      POSTGRES_DB: ${POSTGRES_DB:-my-db-name}
    networks:
      - internal-network
      - internet

  pgadmin:
    image: dpage/pgadmin4:4.18
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - internal-network
      - internet

  minio:
    image: bitnami/minio:2024.11.7
    restart: always
    ports:
      - 9000:9000
      - 8000:8000
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-very-hard-password}
      MINIO_DEFAULT_BUCKETS: 'main'
      MINIO_API_PORT_NUMBER: 9000
      MINIO_CONSOLE_PORT_NUMBER: 8000
    volumes:
      - minio-data:/bitnami/minio/data
    networks:
      - internet

  loki: 
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:3100/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3200:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
    volumes:
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  
    # frontend:
    #   container_name: compose-front-container
    #   build:
    #     context: frontend
    #     dockerfile: Dockerfile
    #   image: cr.yandex/${CR_REGISTRY}/places-frontend:latest
    #   networks:
    #     - internet
    #   ports:
    #     - 8081:80
    #   restart: unless-stopped

  # # Redis
  # redis:
  #   container_name: places-redis
  #   # platform: linux/x86_64
  #   image: docker.io/bitnami/redis:7.0
  #   command: redis-server --requirepass password
  #   ports:
  #     - 6379:6379
  #   environment:
  #     - REDIS_PASSWORD=password
  #   networks:
  #     - redis-network

  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   restart: always
  #   environment:
  #     REDIS_HOSTS: redis
  #     REDIS_HOST: redis
  #     REDIS_PORT: redis:6379
  #     REDIS_PASSWORD: password
  #     HTTP_USER: root
  #     HTTP_PASSWORD: root
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - redis-network

  # backend:
  #   container_name: compose-back-container
  #   build:
  #     # context: backend
  #     dockerfile: Dockerfile
  #   image: cr.yandex/${CR_REGISTRY}/places-nest:latest
  #   # platform: linux/amd64
  #   networks:
  #     - internal-network
  #     - internet
  #   ports:
  #     - 4000:4000
  #   restart: unless-stopped
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgres
  #   volumes:
  #     - ./uploads:/app/uploads
  #     #- ./uploads:/usr/src/app/uploads

# volumes:
#   redis:
#   redis-config:

volumes:
  pgadmin-data:
  minio-data:
    driver: local
  loki_data:
  grafana_data:

networks:
  internal-network:
    driver: bridge
    internal: true
  redis-network:
    driver: bridge
  internet:
    driver: bridge
